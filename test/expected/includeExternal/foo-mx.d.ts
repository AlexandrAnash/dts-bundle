// Generated by dts-bundle v0.1.1

declare module 'foo-mx' {
    import exp = require('__foo-mx/lib/exported-sub');
    import mod1 = require('__foo-mx/index/__/external1');
    export import Foo = require('__foo-mx/Foo');
    export function run(foo?: Foo): Foo;
    export function flep(): exp.ExternalContainer;
    export function bar(): mod1.SomeType;
}

// This example typing can be considered to have been installed
// using e.g. 'tsd' (Typescript Definition Manager).
//
// We don't want these external type definitions to end up in
// in 'our' typing, even though we may e.g. return such types.
//
// For now, it is expected that our end-users will include these
// dependent definitions themselves, such as usually already
// happens with e.g. node.d.ts.

// This one is used/returned from the index file
declare module '__foo-mx/index/__/external1' {
    export class SomeType {
        foo(): void;
    }
}

// This one is used in a subdirectory
declare module '__foo-mx/index/__/external2' {
    export class AnotherType {
        foo(): void;
    }
}

declare module '__foo-mx/lib/exported-sub' {
    import Foo = require('__foo-mx/Foo');
    import mod2 = require('__foo-mx/index/__/external2');
    export class ExternalContainer {
        something: mod2.AnotherType;
    }
    export function bar(foo: Foo): string;
    export function bazz(value: string, option?: boolean): string;
}

declare module '__foo-mx/Foo' {
    class Foo {
        foo: string;
        constructor(secret?: string);
    }
    export = Foo;
}

